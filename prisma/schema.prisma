// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int          @id @default(autoincrement())
  email                String       @unique
  password             String
  givenName            String
  familyName           String
  about                String?
  dateOfBirth          DateTime?
  createdAt            DateTime     @default(now())
  Post                 Post[]
  requestingFriendship Friendship[] @relation(name: "requestingUser")
  requestedFriendship  Friendship[] @relation(name: "requestedUser")
  Like                 Like[]
  Comment              Comment[]
  Share                Share[]
}

model Post {
  id            Int       @id @default(autoincrement())
  content       String?
  mediaLocation String?
  author        User      @relation(fields: [userId], references: [id])
  userId        Int
  totalLikes    Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Like          Like[]
  Comment       Comment[]
  Share         Share[]
}

model Share {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friendship {
  requestingUser   User     @relation(name: "requestingUser", fields: [requestingUserId], references: [id])
  requestingUserId Int
  requestedUser    User     @relation(name: "requestedUser", fields: [requestedUserId], references: [id])
  requestedUserId  Int
  createdAt        DateTime @default(now())

  @@id([requestingUserId, requestedUserId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Like      Like[]
}

model Like {
  id            Int      @id @default(autoincrement())
  post          Post?    @relation(fields: [postId], references: [id])
  postId        Int?
  comment       Comment? @relation(fields: [postCommentId], references: [id])
  postCommentId Int?
  likedEntity   Entity
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime @default(now())
}

enum Entity {
  Post
  Comment
}
