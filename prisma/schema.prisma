// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String       @id @default(uuid())
  email                String       @unique
  password             String
  givenName            String       @map("given_name")
  familyName           String       @map("family_name")
  about                String?
  dateOfBirth          DateTime?    @map("date_of_birth")
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @default(now()) @map("updated_at")
  Post                 Post[]
  requestingFriendship Friendship[] @relation(name: "requestingUser")
  requestedFriendship  Friendship[] @relation(name: "requestedUser")
  Like                 Like[]
  Comment              Comment[]
  Share                Share[]

  @@map("user")
}

model Post {
  id            String    @id @default(uuid())
  content       String?
  mediaLocation String?   @map("media_location")
  author        User      @relation(fields: [userId], references: [id])
  userId        String    @map("user_id")
  totalLikes    Int       @map("total_likes")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  Like          Like[]
  Comment       Comment[]
  Share         Share[]

  @@map("post")
}

model Friendship {
  requestingUser   User     @relation(name: "requestingUser", fields: [requestingUserId], references: [id])
  requestingUserId String   @map("requesting_user_id")
  requestedUser    User     @relation(name: "requestedUser", fields: [requestedUserId], references: [id])
  requestedUserId  String   @map("requested_user_id")
  createdAt        DateTime @default(now()) @map("created_at")

  @@id([requestingUserId, requestedUserId])
  @@map("friendship")
}

model Share {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("share")
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Like      Like[]

  @@map("comment")
}

model Like {
  id          String   @id @default(uuid())
  post        Post?    @relation(fields: [postId], references: [id])
  postId      String?  @map("post_id")
  comment     Comment? @relation(fields: [commentId], references: [id])
  commentId   String?  @map("comment_id")
  likedEntity Entity   @map("liked_entity")
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("like")
}

enum Entity {
  Post
  Comment
}
